
#!/usr/bin/env python3

# STEP 2 -------------------------------------------------
# Prepare various files for doing preprocessing:
# 1. Prep unwarp files: 
#     * create fieldmaps for B0 correction
#     * extract ref vol for motion correction
# 2. Brain extraction
#     * extract brain anatomy for motion correction
# -------------------------------------------------------

# python imports
from os import listdir, makedirs, walk, remove, getlogin
from os.path import isfile, join, exists
import subprocess
import numpy as np
import matplotlib.pyplot as plt
import shutil
import pandas as pd
import socket
from nilearn import image, plotting

# SETUP ---------------------------------------------------
# set subject specific info
subj = ###SUB_ID###
last_scan = ###REF_SCAN###

# Set projdirs dir
projdir = '/mnt/bucket/labs/hasson/mai/projects/impressions'
datadir = join(projdir, 'data')
acqdir = join(projdir, 'acq_params')

# Set code dir
codedir = join(projdir, 'code', 'preproc', 'bash')

# Rawdir
rawdir = join(datadir, subj, 'raw', 'niftis_good')

# Set acqparams file
acqparams_file = join(acqdir, 'acqparams.txt')

# Set config file
config_file = join(acqdir, 'b02b0.cnf')

# Load scan info
scanInfo = pd.read_csv(join(datadir, subj, 'scanInfo.csv'), index_col=0)
print(scanInfo)


# CREATE FIELDMAPS USING FSL'S TOPUP FX -----------------------------
# 1. Merges SE fieldmaps into single file
# 2. Run's FSL topup fx to correct the fieldmaps
# 3. Convert corrected fieldmaps to magnitude map by taking average
# 4. Convert corrected phase map in Hz to phase map in rads    

# create output dir
outdir = join(datadir, subj, 'preproc', 'unwarp_out', 'unwarp_files')
fm_outdir = join(outdir, 'fieldmap_figures')
bet_outdir = join(outdir, 'bet_figures')
if not exists(outdir):
    print(outdir + ' does not exist, creating')
    makedirs(outdir)
if not exists(fm_outdir):
    print(fm_outdir + ' does not exist, creating')
    makedirs(fm_outdir)
if not exists(bet_outdir):
    print(bet_outdir + ' does not exist, creating')
    makedirs(bet_outdir)
    
    
# set fieldmap dir and files
raw_nifti_dir = join(datadir, subj, 'raw', 'niftis_good')
fieldmap_ap = join(raw_nifti_dir, scanInfo.loc['se_fieldmap_ap']['scanName'])
fieldmap_pa = join(raw_nifti_dir, scanInfo.loc['se_fieldmap_pa']['scanName'])
ref_epi = join(raw_nifti_dir, scanInfo.loc[last_scan]['scanName'])

# run topup
get_ipython().system("{join(codedir, 'prep_unwarpFiles.sh')} {outdir} {fieldmap_ap} {fieldmap_pa} 
                      {acqparams_file} {config_file} {ref_epi}")


# MAKE FIELDMAP FIGURES ----------------------------------------------

# Original SE maps
fieldmap = join(outdir, 'concat_fieldmaps.nii.gz')
print('saving images of original SE maps...')
for i in range(3):
    plot_title = 'orig_se_ap_' + str(i)
    plotting.plot_anat(image.index_img(fieldmap,i), dim=-1, title=plot_title, 
                       output_file = join(fm_outdir, plot_title + '.png'))
for i in range(3,6):
    plot_title = 'orig_se_pa_' + str(i)
    plotting.plot_anat(image.index_img(fieldmap,i), dim=-1, title=plot_title, 
                       output_file = join(fm_outdir, plot_title + '.png'))

# Corrected SE maps
fieldmap = join(outdir, 'topup_iout.nii.gz')
print('saving images of corrected SE maps...')
for i in range(3):
    plot_title = 'corr_se_ap_' + str(i)
    plotting.plot_anat(image.index_img(fieldmap,i), dim=-1, title=plot_title, 
                       output_file = join(fm_outdir, plot_title + '.png'))
for i in range(3,6):
    plot_title = 'corr_se_pa_' + str(i)
    plotting.plot_anat(image.index_img(fieldmap,i), dim=-1, title=plot_title, 
                       output_file = join(fm_outdir, plot_title + '.png'))
    
# Check magnitude and phase maps
print('saving images of phase and magnitue maps...')
plotting.plot_anat(join(outdir, 'magnitude.nii.gz'), dim=-1, title='mag map', 
                  output_file = join(fm_outdir, 'mag_map_mean.png'))
plotting.plot_anat(join(outdir, 'magnitude_brain.nii.gz'),  dim=-1, title='mag map brain', 
                  output_file = join(fm_outdir, 'mag_map_brain.png'))
plotting.plot_anat(join(outdir, 'topup_fout.nii.gz'),  dim=0, title='phase map', 
                   output_file = join(fm_outdir, 'phase_map.png'))


# In[50]:

#### Run bet to extract brain ####
data_outdir = join(projdir, 'data', subj, 'data')
if not exists(data_outdir):
    print(data_outdir + ' does not exist, creating')
    makedirs(data_outdir)

# nifti names
anat_raw = join(projdir,'data', subj, 'raw', 'niftis_good', scanInfo.loc['anat']['scanName'])
anat_reorient = join(data_outdir, subj + '_t1w_reorient.nii.gz')
anat_brain = join(data_outdir, subj + '_t1w_reorient_brain.nii.gz')

# run bet
get_ipython().system("{join(codedir, 'run_bet.sh')} {anat_raw} {anat_reorient} {anat_brain}")

# add niftis to scan info
# newNiftis = pd.DataFrame({'scanName': [subj + '_t1w_reorient.nii.gz', subj + '_t1w_reorient_brain.nii.gz'], 
#                          'scanNum':[8, 8], 'scanType':['anat', 'anat']}, index=['anat_reorient', 'anat_brain'] )
# scanInfo = scanInfo.append(newNiftis)
# scanInfo.to_csv(join(datadir, subj, 'scanInfo.csv'))


# In[57]:

#### Save figures for bet ####
plt_title = 'bet'
plotting.plot_roi(roi_img=anat_brain, bg_img=anat_reorient, cmap='hot', title=plt_title,
                  output_file=join(bet_outdir, plt_title))


# In[48]:




# In[ ]:




# In[ ]:




# In[ ]:




# In[ ]:




# In[ ]:




# ### Make files for doing fieldmap correction using topup
# 
# Meir's function for doing this is: slurm_fslblip.sh. It takes five arguments:
# 1. Path to fieldmaps
# 2. Name of AP fieldmap
# 3. Name of PA fieldmap
# 4. FSL topup aquisition params filename (not sure what this is yet, const_fsltopup_acqparams_file_name)
# 5. FSL topup CNF filename (also not sure what this is, const_fsltopup_cnf_file_name)
# 
# ** Here is the procedure for creating these the topup files for b0 correction **
# 1. Use FSLmerge to merge the two SE fieldmaps into one file (all_SE)
# 2. The aqusition params file (4 above) you have to create manually. This file has a line for each of the 6 fieldmaps and specifies direction of encoding and total readout in seconds. AP = 1, and PA = -1, so if you have AP, AP, AP, PA, PA,PA, the first three columsn should be: [0 1 0] for AP, and [0 -1 0] for PA. The total readout is calculated seperately, following instructions here: https://pni-facilities.princeton.edu/index.php/Method_2:_Blip-up_blip-down_field_map_correctio
# 3. The CNF configuration file (5 above) is provided by fsl and should work without any modifications. On spock it is located at  /jukebox/pkgs/FSL/5.0.9/etc/flirtsch/
# 4. Check SE files to make sure they look okay!!
# 5. Run topup. Check files
# 6. Need a magnitude map to do correction. Use fslmaths to do get average of the 6 images
# 7. Need a phase map to o correction. Use fslmaths to get phase map in radians from fsl_topup_fout
# 
# **Calculating the aquisition time for file 4**
# 
# **Method 1:** Use this formula based on scan parameters of your BOLD EPI protocol:
# * Formula: ((Matrix size / IPAT_factor) -1 ) * echo spacing in seconds = Readout time in seconds
# * Example: ((104/2)-1)*0.00056 = 0.02856 sec
# * For my scan
#   * Matrix size: base res = 96. 
#       * In dicom file, you can find this as Private_0051_100b, which is size of the image in the phase encoding direction
#   * IPAT factor = 1 (no ipat)
#   * Echo spacing in seconds: 
#       * echo spacing needs to be divided by ipat factor
#       * can ignore partial fourier and multiband sms
#       * echo spacing = 0.7 ms -> 0.0007
#   * ((96 / 1) - 1) * .0007 = __0.0665__
#  
# Or use this formula (again, based off your BOLD EPI protocol):
#  Formula: (number of phase encoding steps - 1) * effective echo spacing in sec = Total readout time in sec
#  Example: (103-1)*0.00027999 = 0.02855898 sec
#  
# **Method2:** Use this formula based on scan parameters of your BOLD EPI protocol:
# * Formula: (number of phase encoding steps - 1) * effective echo spacing in sec = Total readout time in sec
#    * Also note that "number of phase encoding steps" should be had you had to collect all k-space lines (i.e, all phase-encoding steps). So if your EPI protocol uses phase partial fourier (often, 7/8 or 6/8) you cannot use the value in the dicom header and instead you should provide the total number of phase encoding steps had you turned off partial k-space sampling.
# * Example: (103-1)*0.00027999 = 0.02855898 sec
# * For my scan:
#    * Number of phase encoding steps = 84 (from dicom header, NumberOfPhaseEncodingSteps)
#        * Phase partial fourier: 7/8
#        * Actual Number of Steps = 84 * 8/7 = 96
#    * Effective echo spacing = echo spacing / ipat factor
#        * echo spacing in sec = .0007
#        * ipat = 1
#        * effective echo spacing = .0007
#    * (96 - 1) * .0007 = __0.0665__
# 

# ## Motion correction and fieldmap correction steps
# 
# 1. Convert phase map from topup (topup_fout.nii.gz) to a pixel-shift map
#     * fslmaths <topup_fout> -mul <readouttimeinsec> <output>
#         * readoutimeinsec is from above: 0.0665
#         * this is the original topup_fout file in Hz, not the converted one in radians!!
# 2. Convert to deformation (warp) map
#     * convertwarp -r <magnitude> -s <shiftmap> -o <output> -d <unwarpdirection> y
#     * checked both unwarp dirs, y and y-. y is the correct one
#     
#     

# In[ ]:



